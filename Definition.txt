Cara Membaca Dan Menulis File Di Pemrograman C

Apa yang akan terjadi bila program ditutup?
Yap! semua data yang tersimpan di variabel akan hilang.
Memanfaatkan variabel saja tidak akan cukup untuk menyimpan data. Karena itu, kita membutuhkan media penyimpanan lain seperti File.

Membaca File dengan Program C

Sebelumnya kita harus tau :
â€œFile di komputer itu ada dua jenis, yakni file teks dan binary."
File teks biasanya dibuat dengan teks editor, contohnya seperti: file txt, file csv, file html, dll.
File teks mudah dibaca dan ditulis.
Sedangkan file binary adalah file yang tersimpan dalam bentuk biner (0 & 1). Contohnya seperti: File exe dan file bin.
File binary sulit dibaca, namun dapat menyimpan data lebih banyak dan aman.

Cara ngebuka atau membaca file di C gimana >?

Fungsi fopen() akan membuka file sesuai dengan mode yang kita berikan.
Mode r artinya read atau baca saja. Selain mode r ada juga mode yang lain.

Berikut ini daftar lengkap modenya: 
Mode	Arti	                                    	     Jika File Tidak ada
r	Buka untuk dibaca	                       		return NULL.
rb	Buka untuk dibaca dalam binary.              	        return NULL.
w	Buka untuk ditulis	                                Buat baru atau tulis ulang jika ada
wb	Buka untuk ditulis dalam binary	             	        Buat baru atau tulis ulang jika ada
a	Buka untuk ditambahkan	                     	        Buat baru atau tulis ulang jika ada
ab	Buka untuk ditambahkan dalam binary	       		Buat baru atau tulis ulang jika ada
r+	Buka untuk dibaca dan ditulis	returns       		NULL.
rb+	Buka untuk dibaca dan ditulis dalam binary		returns NULL.
w+	Buka untuk ditulis dan dibaca	                	Buat baru atau tulis ulang jika ada
wb+	Buka untuk dibaca dan ditulis dalam binary		Buat baru atau tulis ulang jika ada
a+	Buka untuk dibaca dan ditambahkan isinya	        Buat baru atau tulis ulang jika ada
ab+	Buka untuk dibaca dan ditambahkan isinya dalam binary	Buat baru atau tulis ulang jika ada

Fungsi fopen() akan menghasilkan sebuah pointer yang menunjuk ke alamat memori dari file yang akan dibuka, 
karena itulah kita membutuhkan pointer untuk mengaksesnya.

Contohnya gini :
// membuat pointer
File *fptr;

// membuka file
fptr = fopen("namafile.txt", "r");

Jadi pertama kita membuat pointernya *fptr
dan pointer fptr akan kita buka menggunakan fungsi fopen dengan nama file ber ext .txt r = read / membaca

Contoh program membaca dan menulis pada C:

#include <stdio.h>

void main()
{
  char buff[255];
  FILE *fptr;

  // membuka file 
  if ((fptr = fopen("isi.txt","r")) == NULL){
      printf("Error: File yang dituju gak ada!");
      // Tutup program karena file gak ada.
      exit(1);
  }

  // baca isi file dengan gets lalu simpan ke buff
  fgets(buff, 255, fptr);
  // tampilkan isi file
  printf("%s", buff);

  // tutup file
  fclose(fptr);
}

Hasilnya ? Ya error kenapa ? karna kita belum membuat filenya !

Coba sekarang kita buat file ext .txt lalu kita exe lagi programnya 
Contoh :

Waahh asik juga belajar C
Kenapa ga dari dulu aku mau belajar C
Ternyata belajar C mudahh ya 
Ini cuma buat contoh 

Simpan itu dengan nama isi.txt lalu kita exe lagi programnya 

Hasilnya :

root@rajingoding:/mnt/d/Ngoding_C# ./iniContohMembacaDanMenulis
Waahh asik juga belajar C

Isi file akan dibaca satu baris karena kita menggunakan fungsi fgets().
fgets(buff, 255, fptr);
Fungsi fgets() akan membaca isi file yang ditunjuk oleh pointer fptr, kemudian hasilnya akan disimpan ke dalam variabel buff.
Fungsi fgets() hanya akan membaca satu baris saja. Anka 255 adalah panjang baris (karakter) yang akan dibaca.
Jika kita ubah menjadi seperti ini:

fgets(buff, 20, fptr);

Maka hasil outputnya:

Ini adalah puisi un
Panjang karakter ini, bisa juga kita ambil dengan fungsi sizeof() agar mengikuti panjang karakter dari variabelnya.

Contoh:

sizeof(buff);
Lalu bagaimana cara membaca semua baris teks yang ada di dalam file?
Gampang!
Kita tinggal panggil fungsi fgets() berkali-kali.
Sekarang coba ubah kode programnya menjadi seperti ini:

#include <stdio.h>

void main()
{
    char buff[255];
    FILE *fptr;

    // membuka file
    if ((fptr = fopen("puisi.txt","r")) == NULL){
        printf("Error: File tidak ada!");
        // Tutup program karena file gak ada.
        exit(1);
    }

    // baca isi file dengan gets lalu simpan ke buff
    fgets(buff, sizeof(buff), fptr);
    printf("%s", buff);
    fgets(buff, sizeof(buff), fptr);
    printf("%s", buff);
    fgets(buff, sizeof(buff), fptr);
    printf("%s", buff);
    fgets(buff, sizeof(buff), fptr);
    printf("%s", buff);

    // tutup file
    fclose(fptr);
}

Hasilnya :

root@rajingoding:/mnt/d/Ngoding_C# ./iniContohMembacaDanMenulis
Waahh asik juga belajar C
Kenapa ga dari dulu aku mau belajar C
Ternyata belajar C mudahh ya
Ini cuma buat contoh

So, jadi ez kan kamu tinggal kembangin & belajar lagi aja asah skilmu jangan males, males tidak akan menjadikanmu sukses
Kok program tadi cuma d baca satu baris aja ? sekarang bisa 4 baris, karna kita memanggil fungsi fgets berkali2
trus kalo kita membuat banyak program gimana ? Ingatkan dengan materi loop ? kenapa g dimanfaatin mwheheh 

Contoh program loopnya:

#include <stdio.h>

void main()
{
    char buff[255];
    FILE *fptr;

    // membuka file
    if ((fptr = fopen("puisi.txt","r")) == NULL){
        printf("Error: File tidak ada!");
        // Tutup program karena file gak ada.
        exit(1);
    }

    // baca isi file dengan gets lalu simpan ke buff
    while(fgets(buff, sizeof(buff), fptr)){
        printf("%s", buff);
    }

    // tutup file
    fclose(fptr);
}

Kita menggunakan perulangan while untuk memanggil fungsi fgets()
Loop / perulangan while berenti kalo fungsi fgets() sudah mengasilkan angka null / tidak ada baris lg yg d baca

Menulis program di C

Jika kita membacanya menggunakan fungsi fgets() 
nah kita menulisnya menggunakan fungsi fputs()
fungsi fputs() adalah untuk menulis text ke file yang sedang di buka 
Coba sekarang kita buat contoh programnya buat program baru namanya menulis.c
Dan buat juga file ext .txt bernama gabut.txt

Contoh program :

#include <stdio.h>

void main()
{
    char buff[255];
    char text[255];
    FILE *fptr;

    // membuka file
    fptr = fopen("gabut.txt","w");

    // mengambil input dari user
    printf("Inputkan text yang mau di tambahin :\n");
    fgets(text, sizeof(text), stdin);

    // menulis ke text ke file dengan fungsi fputs
    fputs(text, fptr);

    printf("File berhasil ditulis\n");

    // tutup file
    fclose(fptr);
}

Hasilnya apa ?
root@rajingoding:/mnt/d/Ngoding_C# ./menulis
Inputkan text yang mau di tambahin :
Hai aku gabut
File berhasil ditulis

Dan coba buka file gabut.txt kamu tara, so ez kan 
Jika kamu membuka file untuk ditulis, maka mode yang digunakan adalah w atau w+, a. Silahkan cek kembali tabel mode di atas.
Kalau salah pakai mode gimana?
Ya filenya tidak akan bisa ditulis.
Lalu, gimana cara menulis dan sekaligus menampilkan isi file?
Caranya, kita harus membuka ulang filenya dengan mode yang berbeda-beda.

Contoh:

#include <stdio.h>

void main()
{
    char buff[255];
    char text[255];
    FILE *fptr;

    // membuka file untuk ditulis
    fptr = fopen("gabut.txt","w");

    // mengambil input dari user
    printf("Inputkan isi file: ");
    fgets(text, sizeof(text), stdin);

    // menulis ke text ke file
    fputs(text, fptr);

    printf("File berhasil ditulis\n");

    // tutup file setelah ditulis
    fclose(fptr);

    // buka kembali file untuk dibaca
    fptr = fopen("gabut.txt","r");

    // baca isi file dengan gets lalu simpan ke buff
    while(fgets(buff, sizeof(buff), fptr)){
        printf("Isi filenya sekarang: %s", buff);
    }

    // tutup file
    fclose(fptr);
}

Hasilnya gini :

root@rajingoding:/mnt/d/Ngoding_C# ./Membaca_Menulis
Inputkan Text yang akan di masukan :
Hai kamu
File berhasil ditulis
Isi filenya sekarang: Hai kamu

Oh iya, kita hanya baru menulis dalam satu baris saja. Lalu gimana kalau mau menulis banyak baris?
Gampang, kita hanya tinggal memanggil fungsi fputs() berkali-kali.

Contoh:

#include <stdio.h>

void main()
{
    char buff[255];
    char text[255];
    FILE *fptr;

    // membuka file untuk ditulis
    fptr = fopen("audah.txt","w");

    /* menggunakan loop for untuk 
     * mengulang berapa
     * banyak text yang d input */ 
    for(int i = 0; i < 5; i++){

        // mengambil input dari user
        // fflush(stdin) berfungsi untuk menghapus (flush) isi dari input buffer
        printf("Isi baris ke%d: ", i);
        fgets(text, sizeof(text), stdin);

        // menulis text ke file
        fputs(text, fptr);
    }

    printf("filenya berhasil ditulis\n");

    // tutup file setelah ditulis
    fclose(fptr);

    // buka kembali file untuk dibaca
    fptr = fopen("audah.txt","r");

    // baca isi file dengna gets lalu simpan ke buff
    while(fgets(buff, sizeof(buff), fptr)){
        printf("Isi filenya sekarang: %s", buff);
    }

    // tutup file
    fclose(fptr);
}

Oke materi C berakhir d sini, see you sampai jumpa materi selanjutnya ya teman - teman...
